#include <stdio.h>
#include <conio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Slistamembroscamepro {
    char nome [60];
    char email [60];
    char telefone [15];
    char endereco [60];
    int matricula;
    char cargo [30];
    int cpf [15];
} Membro;

typedef struct scelula {
    Membro info;
    struct scelula * prox;
} Celula;

//Inicializar lista
void inicializar (Celula ** lista) {
    (*lista) = NULL;
}

//Verificar se está vazia
int vazia (Celula ** lista) {
    if((*lista) == NULL) {
        return 1;
	}
	    return 0;
}

//Criando uma nova célula
Celula * criarCelula () {
    Celula * nova = (Celula *) malloc (sizeof(Celula));
    return nova;
}

// inserir no fim
int inserirNoFim (Celula ** lista, Membro novo) {
    Celula * novaCelula;
    Celula * auxiliar;
    novaCelula = criarCelula () ;

	if (novaCelula == NULL) {
		printf("\nErro: Memoria cheia.\n");
		return 0;
	}
	novaCelula->info = novo;
	novaCelula->prox = NULL;

    if (vazia(lista)) {
        (*lista) = novaCelula;
        return 1;
	}

    auxiliar = (*lista);
    while (auxiliar->prox != NULL) {
        auxiliar = auxiliar->prox;
	}

    auxiliar->prox = novaCelula;
    return 1;
}

//Verificando se o cadastro já existe.
Celula * pesquisarMembro (Celula ** lista, int matriculamembro) {
    Celula * auxiliar;

    if (vazia(lista)) {
		printf("\nErro: Lista a Vazia.\n");
		printf("\n");
	}

    auxiliar = (*lista);

    while (auxiliar != NULL) {
        if (auxiliar->info.matricula == matriculamembro) {
            return auxiliar;
		}
        auxiliar = auxiliar->prox;
	}

    printf("\nMembro nao existente na lista.\n");
    printf("\n");
    return lista;
}

//Pesquisando membro e removendo
Membro pesquisarEremover (Celula ** lista, int matricula) {
    Celula *aux1;
    Celula *aux2;
    Membro vazio;

    strcpy (vazio.nome, "");
    strcpy (vazio.email, "");
    strcpy (vazio.telefone, "");
    strcpy (vazio.endereco, "");
    vazio.matricula = 0;
    strcpy (vazio.cargo, "");
    strcpy (vazio.cpf, "");

	if (vazia(lista)) {
        printf("\nErro: Lista vazia.\n");
        printf("\n");
        system("pause");
        return;
	}

	aux1 = (*lista);

	while (aux1->info.matricula != matricula) {
        if(aux1->prox== NULL){
            printf("\nMatricula inexistente.\n");
            printf("\n");
            system("pause");
            return ;
        }
        aux2 = aux1;
        aux1 = aux1->prox;
    }

    if (aux1 == (*lista)) {
        (*lista) = aux1->prox;
	} else {
        aux2->prox = NULL;
	}

    vazio = aux1->info;
    free (aux1);
    printf("\nMembro removido com sucesso.\n");
    system("pause");
    return vazio;
}

//Editar membro
void editarmembro (Celula **lista, int matricula) {
    Celula *aux1;
    Celula *aux2;
    Membro novo;

	if (vazia(lista)) {
        printf ("\nErro: Lista vazia.\n");
        printf("\n");
        system("pause");
        return;
	}

    aux1 = (*lista);

	while (aux1->info.matricula != matricula) {
        if (aux1->prox == NULL) {
            printf("\nMatricula inexistente.\n");
            printf("\n");
		    system("pause");
		    return lista;
        }

		aux2 = aux1;
		aux1 = aux1->prox;

	}

    fflush (stdin);
    printf("\nNovo Nome: ");
    gets(novo.nome);
    fflush (stdin);
    printf("\nNovo Email: ");
    gets(novo.email);
    fflush(stdin);
    printf("\nNovo Telefone: ");
    gets(novo.telefone);
    fflush(stdin);
    printf("\nNovo Endereco: ");
    gets (novo.endereco);
    fflush (stdin);
    printf("\nNova Matricula: ");
    scanf("%d", &novo.matricula);
    fflush(stdin);
    printf("\nNovo Cargo: ");
    gets(novo.cargo);
    printf("\nNovo Cpf: ");
    gets(novo.cpf);
    fflush(stdin);

    aux1->info = novo;

    printf("\nMembro alterado com sucesso.\n");
    printf("\n");
    system("pause");
    return;
}

// Imprimindo Membro
void imprimirMembro(Membro membro) {
    printf ("\nNome: %s", membro.nome);
    printf("\n");
    printf ("\nEmail %s", membro.email);
    printf("\n");
    printf ("\nTelefone: %s", membro.telefone);
    printf("\n");
    printf ("\nMatricula: %d", membro.matricula);
    printf("\n");
    printf ("\nEndereco: %s", membro.endereco);
    printf("\n");
    printf ("\nCargo: %s", membro.cargo);
    printf("\n");
    printf ("\nCpf: %s", membro.cpf);
    printf("\n");
}

// Imprimindo a Lista
void imprimirLista (Celula ** lista) {
    Celula * auxiliar = (*lista);

    if (vazia(lista)) {
        printf("\nErro: lista vazia.\n");
        printf("\n");
        system("pause");
        return;
	} else {
        printf ("\nLista:\n");
        while (auxiliar != NULL) {
            imprimirMembro (auxiliar->info);
            auxiliar = auxiliar->prox;
            printf("\n");
        }
    }

    system("pause >> NULL");
    if (auxiliar == NULL) {
    system("pause");
	}
}

int main() {
//Declaração de variáveis
    Celula *listamembros = NULL;
    Celula *listaexcluidos = NULL;
    int opcao;
    int matricula;
    inicializar(&listamembros);
    inicializar(&listaexcluidos);

//Artifício para repetir o programa.
    do{
//Menu de opções
        system("cls");
        printf("-------------------------------------\n");
        printf("|   CADASTRO DE MEMBROS CAMEPRO:    |\n");
        printf("-------------------------------------\n");
        printf("|                MENU               |\n");
        printf("-------------------------------------\n");
        printf("| <1>  Cadastrar novo membro        |\n");
        printf("|-----------------------------------|\n");
        printf("| <2>  Exibir membros ativos        |\n");
        printf("|-----------------------------------|\n");
        printf("| <3>  Remover membro               |\n");
        printf("|-----------------------------------|\n");
        printf("| <4>  Editar membro                |\n");
        printf("|-----------------------------------|\n");
        printf("| <5>  Exibir membros nao ativos    |\n");
        printf("|-----------------------------------|\n");
        printf("| <0>  Sair                         |\n");
        printf("-------------------------------------\n");
        printf("\n");

//Ler a opcao do menu
        printf ("Digite a opcao: ");
        scanf ("%d", &opcao);

//Menu de opções
        switch(opcao){

        case 1:
//Inserir membro
            fflush(stdin);
            system("cls");
            Membro novomembro;
			printf("-------------------------------------\n");
            printf("|        CADASTRAR NOVO MEMBRO:     |\n");
            printf("-------------------------------------\n");
            printf("\nNome: ");
            gets(novomembro.nome);
            fflush(stdin);
			printf("\nEmail: ");
			gets(novomembro.email);
            fflush(stdin);
			printf("\nTelefone: ");
			gets(novomembro.telefone);
			fflush(stdin);
			printf("\nEndereco: ");
            gets(novomembro.endereco);
			fflush(stdin);
			printf("\nMatricula: ");
            scanf("%d", &novomembro.matricula);
			fflush(stdin);
			printf("\nCargo: ");
            gets(novomembro.cargo);
			fflush(stdin);
			printf("\nCpf: ");
			gets(novomembro.cpf);
            inserirNoFim(&listamembros, novomembro);
            break;

        case 2:
//Exibindo membros ativos cadastrados
            system("cls");
            printf("-------------------------------------\n");
            printf("|           MEMBROS ATIVOS:         |\n");
            printf("-------------------------------------\n");
            imprimirLista(&listamembros);
            break;

        case 3:
//Excluindo membros cadastrados
            system("cls");
            printf("-------------------------------------\n");
            printf("|           REMOVER MEMBRO:         |\n");
            printf("-------------------------------------\n");
            printf("\nDigite a matricula do membro: ");
            scanf("%d", &matricula);
			Membro membroexcluido;
			membroexcluido= pesquisarEremover(&listamembros, matricula);
			inserirNoFim(&listaexcluidos, membroexcluido);
            break;

        case 4:
//Editar membros cadastrados
            system ("cls");
            printf("-------------------------------------\n");
            printf("|           EDITAR MEMBRO:          |\n");
            printf("-------------------------------------\n");
            printf("\nDigite a matricula do membro: ");
            scanf("%d", &matricula);
			editarmembro(&listamembros, matricula);
            break;
        case 5:
//Exibindo membros excluidos
            system ("cls");
            printf("-------------------------------------\n");
            printf("|        MEMBROS NAO ATIVOS:        |\n");
            printf("-------------------------------------\n");
            imprimirLista(&listaexcluidos);
            break;

        case 0:
//Sair do menu
        break;
        default:
//Previnir que um usuário digite uma opção que não existe
        system("cls");
        break;
        }
    } while(opcao!=0);
    system("pause");
}
